class Solution {
public:
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        vector<int> parent(n, -1);

        for (int i = 0; i < n; i++) {
            if (leftChild[i] != -1) {
                if (parent[leftChild[i]] != -1) return false;
                parent[leftChild[i]] = i;
            }
            if (rightChild[i] != -1) {
                if (parent[rightChild[i]] != -1) return false;
                parent[rightChild[i]] = i;
            }
        }

        int rootCount = 0;
        int root = -1;

        for (int i = 0; i < n; i++) {
            if (parent[i] == -1) {
                rootCount++;
                root = i;
            }
        }

        if (rootCount != 1) return false;

        vector<bool> visited(n, false);
        queue<int> q;

        q.push(root);
        visited[root] = true;
        int nodesVisited = 0;

        while (!q.empty()) {
            int node = q.front();
            q.pop();
            nodesVisited++;

            if (leftChild[node] != -1 && !visited[leftChild[node]]) {
                q.push(leftChild[node]);
                visited[leftChild[node]] = true;
            }

            if (rightChild[node] != -1 && !visited[rightChild[node]]) {
                q.push(rightChild[node]);
                visited[rightChild[node]] = true;
            }
        }

        return nodesVisited == n;
    }
};
